////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, step = 1, output = []) {
    //base
  //if both numbers are equal, return output
  if(num1 === num2 || step <= 0){
    return output;
  }
  if(num2 - step === num1){
    output.push(num1, num2);
    return output;
  }
  //recursion
  //push the value of num1 into output
  output.push(num1);
  //return function range 
  
  return range(num1 + step, num2, step, output);
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, total = 0) {
  //base
  //if array's length is 0, return total
  if(array.length === 0){
  return total;
  }
  //recursion
  //add value of array[0] to itself
  total += array[0];
  //return function call with array[0] sliced off
  return sum(array.slice(1), total);

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, output = []) {
  //base
  //if array's length is 0, return output
  if(array.length === 0){
    return output;
  }
  //recursion
  //unshift array[0] into output;
  output.unshift(array[0]);
  //return function call with array[0]sliced off
  return reverseArray(array.slice(1), output);
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array, output = []) {
 
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  //create rest value and initialize to null
  let rest = null;
  //iterate through input array backwards
  for(let i = array.length - 1; i >= 0; i--){
    rest = { value: array[i], rest: rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
